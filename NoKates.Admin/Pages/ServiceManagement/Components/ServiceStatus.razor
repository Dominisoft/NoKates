@using NoKates.Common.Models
@using NoKates.Common.Infrastructure.Extensions
@using NoKates.Common.Infrastructure.Helpers
@using NoKates.LogsAndMetrics.Common
@using NoKates.LogsAndMetrics.Common.DataTransfer
@using NoKates.WebConsole
@using NoKates.WebConsole.Models
@inject IMetricsClient MetricsClient;
@page "/NA"

<div>
    if (@Status == null){
    
    Loading

    } 
    else
    @if (@Status.IsOnline)
    {
        <div style="border:solid; border-color:black; border-width:2px;">
            <div style="display:flex;">
                <div style="width:48%;">
                    <div style="float:left; display:inline;">
                        <div style="display:flex;">
                            <h2 style="padding-left:10px;">@Status.Name </h2>
                            <h6 style="float:left;">(@Status.Version?.Environment)</h6>
                        </div>
                        <h4 style="color:green;padding-left:10px; float:left;">Online</h4><br />
                        <h4 style="float:left;padding-left:10px;">Version @Status.Version?.Version</h4>
                    </div>

                </div>
                <div style="align-content:flex-end; width:48%;">
                    <div style="text-align:right;">
                        <div>
                            <h6>Start: @Status.StartTime</h6>
                        </div>
                        <div>
                            <h6 style="text-align:right;">Deployed: @Status.Version?.DeploymentDate</h6>
                        </div>
                        <div>
                            <a href="~/ServiceManagement/Logs?ServiceName=@Status.Name" title="View logs" style="padding:3px;">
                                <i class="fas fa-file-invoice fa-3x"></i>
                            </a>

                            <a href="~/ServiceManagement/Requests?ServiceName=@Status.Name" title="View Request logs" style="padding:3px;">
                                <i class="fas fa-globe fa-3x"></i>
                            </a>

                            <a href="~/ServiceManagement/EndpointStatusList?ServiceName=@Status.Name" title="View Metrics" style="padding:3px;">
                                <i class="fas fa-chart-line fa-3x"></i>
                            </a>


                       
@*
                            @if (@Model.AppStatus.ContainsKey(@Status.Name))
                            {
                                @if (@Model.AppStatus[@Status.Name])
                                {
                                    <a href="./StatusList?function=StopAppPool&name=@Status.Name" title="Stop" style="padding: 3px;">
                                        <i class="far fa-stop-circle fa-3x"></i>
                                    </a>
                                }
                                else
                                {
                                    <a href="./StatusList?function=StartAppPool&name=@Status.Name" title="Start" style="padding: 3px;">
                                        <i class="far fa-play-circle fa-3x"></i>
                                    </a>
                                }
                            }*@
                        </div>
                        <div>
                            <h6 style="text-align:right;">Branch: @Status.Version?.Branch-@Status.Version?.LastCommitId</h6>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <svg class="availability-time-line-graphic" id="uptime-component-74dvc0qj8zdp" style="padding-left:10px; align-content:center;" preserveAspectRatio="none" height="75" viewBox="0 0 1000 50">
                    @foreach (var period in @StatusPeriods)
                    {
                        <rect height="@period.Height" width="@period.Width" x="@period.X" y="0" fill="@period.Color" data-html="true">
                            <title>
                                Index: @period.RequestMetric.Index
                                Average Response Time: @period.RequestMetric.AverageResponseTime ms
                                Request Count: @period.RequestMetric.RequestCount
                                Error Count: @period.RequestMetric.Errors
                                Error Rate: @period.ErrorPercent.ToString("F2") %
                                @if (@period.RequestMetric.RequestCount > 0)
                                {
                                    <p> Requests: @period.RequestMetric.FirstRequest - @period.RequestMetric.LastRequest</p>
                                }
                            </title>
                        </rect>
                    }
                </svg>
            </div>
        </div>
    }
    else
    {
        <div style="border:solid; border-color:black; border-width:2px;">
            <div style="display:flex;">
                <div style="width:48%;">
                    <div style="float:left; display:inline;">
                        <div style="display:flex;">
                            <h2 style="padding-left:10px;">@Status.Name </h2>
                            <h6 style="float:left;"></h6>
                        </div>
                        <h4 style="color:red;padding-left:10px; float:left;">Offline</h4><br />
                        <h4 style="float:left;padding-left:10px;"></h4>
                    </div>

                </div>
                <div style="align-content:flex-end; width:48%;">
                    <div style="text-align:right;">
                        <div>
                            <h6>Start: </h6>
                        </div>
                        <div>
                            <h6 style="text-align:right;">Deployed: </h6>
                        </div>
                        <div>
                            <a href="~/ServiceManagement/Logs?ServiceName=System_Event_Log" title="View logs" style="padding:3px;">
                                <i class="fas fa-file-invoice fa-3x"></i>
                            </a>

                            <a href="~/ServiceManagement/Requests?ServiceName=@Status.Name" title="View Request logs" style="padding:3px;">
                                <i class="fas fa-globe fa-3x"></i>
                            </a>

                            <a href="~/ServiceManagement/EndpointStatusList?ServiceName=@Status.Name" title="View Metrics" style="padding:3px;">
                                <i class="fas fa-chart-line fa-3x"></i>
                            </a>

@*                            @if (@Model.AppStatus.ContainsKey(@Status.Name))
                            {
                                @if (@Model.AppStatus[@Status.Name])
                                {
                                    <a href="./StatusList?function=StopAppPool&name=@Status.Name" title="Stop" style="padding: 3px;">
                                        <i class="far fa-stop-circle fa-3x"></i>
                                    </a>
                                }
                                else
                                {
                                    <a href="./StatusList?function=StartAppPool&name=@Status.Name" title="Start" style="padding: 3px;">
                                        <i class="far fa-play-circle fa-3x"></i>
                                    </a>
                                }
                            }*@

                        </div>
                        <div>
                            <h6 style="text-align:right;">Branch: </h6>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <p>---Service is offline---</p>
            </div>
        </div>
    }

</div>



@code {

    [Parameter]
    public string Name { get; set; }


    public Common.Models.ServiceStatus Status { get; set; }
    public List<StatusPeriod> StatusPeriods { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await TryGeneratePeriods(Name, "");

        Status = new Common.Models.ServiceStatus()
        {
            Name = Name,
            DeploymentStatus = DeploymentStatus.DeploymentCompleted,
            IsOnline = true,
            StartTime = DateTime.Now,
            Uri = "asdf",
            Version = new VersionDetails
            {
                Branch = "Test",
                BuildDate = DateTime.Today,
                DeploymentDate = DateTime.Today,
                Environment = "Debug",
                LastCommitId = "asdf2",
                Version = "1.0"
            }
        };

        return;
    }


    public async Task TryGeneratePeriods(string name, string token)
    {
        await Task.Run(() =>
        {
            try
            {
                HttpHelper.SetToken(token);
                var metrics = MetricsClient.GetMetricSummaryByServiceName(name).ThrowIfError();
                var periods = metrics.Select(metric =>
                {
                    var status = StatusColor.Good;

                    var period = new StatusPeriod
                    {
                        Index = metric.Index,
                        X = (672) - metric.Index * 4,
                        Height = 50,
                        Width = 3,
                        Color = status,
                        RequestMetric = metric

                    };



                    if (metric.RequestCount == 0)
                        status = StatusColor.NoTraffic;
                    else if (period.ErrorPercent > GlobalConfiguration.ErrorPercentThreshold)
                        status = StatusColor.Issue;
                    else if (metric.AverageResponseTime > GlobalConfiguration.ResponseTimeThreshold)
                        status = StatusColor.Degraded;
                    period.Color = status;

                    return period;
                }).ToList();
                StatusPeriods = periods;
            }
            catch (Exception ex)
            {
                StatusPeriods = new List<StatusPeriod>
                {
                    new StatusPeriod
                    {
                        Index = 0,
                        Width = 168,
                        Height = 50,
                        Color = StatusColor.NoTraffic,
                        RequestMetric = new RequestMetricSummaryDto()
                        {

                        }

                    }
                };
            }
        });
    }


}
